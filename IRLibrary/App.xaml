<Application x:Class="IRLibrary.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:IRLibrary"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <!-- Цвет, который уже есть в системе -->
        <SolidColorBrush x:Key="BaseButtonBack" Color="LightCoral"/>
        
        <!-- Цвет из Hex(#00F00F) -->
        <SolidColorBrush x:Key="BaseButtonFont" Color="#000000"/>

        <!-- К любому цвету можно применить прозрачность через Opacity в процентах через десятичные, тоесть 23% будет 0.23-->
        <SolidColorBrush x:Key="GhostColor" Color="Bisque" Opacity="1"/>

        <!-- Так можно задать свойства одному типу элемента. Например это будет влиять на все Button -->
        <Style TargetType="{x:Type Button}" x:Name="DefaultButtonStyle">

            <!-- Цвет кнопки -->
            <Setter Property="Background" Value="{StaticResource BaseButtonBack}" />

            <!-- Цвет текста -->
            <Setter Property="Foreground" Value="{StaticResource BaseButtonFont}"/>

            <!-- Цвет рамки -->
            <Setter Property="BorderBrush" Value="{StaticResource GhostColor}"/>

            <!-- Толщина рамки -->
            <Setter Property="BorderThickness" Value="2.5"/>

            <!-- Ширина и высота -->
            <Setter Property="Width" Value="100"/>
            <Setter Property="Height" Value="25"/>

            <!-- Отступ кнопки от других элементов в порядке: "Лево, верх, право, низ". Если указать только одно значение оно приметнится для каждой стороны -->
            <Setter Property="Margin" Value="10, 5, 10, 5"/>
        </Style>

        <Style TargetType="Rectangle" x:Key="DefaultRectangleStyle">
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Height" Value="25"/>

            <!-- Цвет прямоугольника -->
            <Setter Property="Fill" Value="Bisque"/>

            <!-- Граница скругления по границе на верх/низ -->
            <Setter Property="RadiusX" Value="15"/>

            <!-- Граница скругления по границе на боках -->
            <Setter Property="RadiusY" Value="12.5"/>

            <Setter Property="Margin" Value="20, 5"/>
        </Style>

        <Style TargetType="Label" x:Key="RoundLabel">
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="Background" Value="Bisque"/>
            <Setter Property="Margin" Value="20, 2.5, 20, 0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Style.Resources>
                <Style TargetType="Border">
                    <Setter Property="CornerRadius" Value="15"/>
                </Style>
            </Style.Resources>
        </Style>
        
        <Style x:Key="ExpanderHeaderFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}" Background="Transparent">
                            <ContentPresenter HorizontalAlignment="Left" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Expander}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}"/>
            <Setter Property="Background" Value="LightCoral"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="MinHeight" Value="37"/>
            <Setter Property="Padding" Value="0, 10"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <DockPanel>
                                <Grid DockPanel.Dock="Top">
                                    <ToggleButton Panel.ZIndex="1" Height="{Binding Path=MinHeight, RelativeSource={RelativeSource TemplatedParent}}" x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}"
                                                  Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}"
                                                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="0" MinWidth="0" MinHeight="0" Padding="10, 5" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="Center"
                                     />
                                    <Polyline Panel.ZIndex="2" x:Name="ExpanderArrow" VerticalAlignment="Center" HorizontalAlignment="Right" Points="10, 5, 5, 15, 0, 5" Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="2" Margin="0, 9, 10, 11"/>
                                </Grid>
                                <Grid Background="Black" x:Name="ExpandSite" DockPanel.Dock="Bottom" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Canvas>
                                        <Path Data="M 20,0 L 50,0 L35,10 z" StrokeThickness="0" Fill="{TemplateBinding Background}" Stretch="None"/>
                                    </Canvas>
                                    <ContentPresenter Focusable="false" Margin="{TemplateBinding Padding}"/>
                                </Grid>
                            </DockPanel>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Coral"/>
                            </Trigger>
                            <Trigger Property="IsExpanded" Value="true">
                                <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                <Setter Property="LayoutTransform" TargetName="ExpanderArrow">
                                    <Setter.Value>
                                        <RotateTransform CenterX="0.5" CenterY="0.5" Angle="180"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="local:ExpanderLabel">
            <Setter Property="Foreground" Value="WhiteSmoke"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Padding" Value="20, 7.5"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="DarkSlateGray"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="local:RealizeLabel">
            <Setter Property="Foreground" Value="WhiteSmoke"/>
            <Setter Property="Padding" Value="10"/>
            <Setter Property="Background" Value="LightCoral"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="MinHeight" Value="30"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Coral"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
    </Application.Resources>
</Application>
